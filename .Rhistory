library(devtools)
library(roxygen2)
getwd()
setwd("c:/users/leahcomment/packages")
setwd("c:/users/leahcomment/packages/ltools")
?create
?makedir
?mkdir
setwd("c:/users/leahcomment/packages")
build("ltools2")
setwd("c:/users/leahcomment/packages")
create("ltools2")
create("ltools3",rstudio = FALSE)
setwd("c:/users/leahcomment/packages/ltools")
document()
install_github('ltools','lcomm')
install_github("lcomm/ltools")
cat_function()
?cat_function()
cbind(letters[1:3], 1:3)
is.numeric(cbind(letters[1:3], 1:3))
my.ob = rbind(1:5,6:10,11:15)
my.ob[6] = NA
colMeans(my.ob)
apply(my.ob, 2, FUN = median)
apply(my.ob, 2, FUN = median, NA.rm=FALSE)
apply(my.ob, 2, FUN = median, NA.rm=TRUE)
apply(my.ob, 2, FUN = median, na.rm=TRUE)
?colMeans
assert_that(is.numeric(my.object))
library(assertthat)
assert_that(is.numeric(my.object))
assert_that(is.numeric(my.ob))
assert_that(is.numeric(c("a",2)))
colMedians <- function(colMedians.object, na.rm=FALSE){
#Parameter checking if possible
if (require(assertthat)){
#Check that the input is either a matrix or a data frame
assert_that(is.matrix(colMedians.object) | is.data.frame(colMedians.object))
#Check it is all numeric
assert_that(is.numeric(colMedians.object))
}
#Return the column-wise medians, exc
return(apply(colMedians.object, 2, FUN = median, na.rm=na.rm))
}
colMedians(matrix(1:10,5,2))
colMedians(matrix(1:10,2,5))
colMedians(as.data.frame(matrix(1:10,2,5)))
as.data.frame(matrix(1:10,2,5))
colMedians(as.matrix(as.data.frame(matrix(1:10,2,5))))
wrongsies = data.frame(let = letters[1:4], num = 1:4)
wrongsies
colMedians(wrongsies)
wrongsies = data.frame(let = letters[1:4], num = 1:4, num2=5:8)
colMedians(wrongsies[,2:3])
wrongsies[,2:3]
?is.numeric
is.numeric(wrongsies[,2:3])
as.numeric(wrongsies[,2:3])
attributes(wrongsies)
attributes(wrongsies[,2])
attributes(wrongsies[,2:3])
sapply(wrongsies, is.numeric)
max(sapply(wrongsies, is.numeric))
?switch
is.data.frame(colMedians.object)
?assert_that
?writeLines
sapply(wrongsies, is.numeric)
matrix(1:15,3,5)
?makeCI
as.data.frame(matrix(1:15,3,5))
makeCI.obj = as.data.frame(matrix(1:15,3,5))
t(apply(makeCI.obj, 2, FUN = makeCI, alpha, na.rm = na.rm)))
makeCI.obj = as.data.frame(matrix(1:15,3,5))
t(apply(makeCI.obj, 2, FUN = makeCI, alpha, na.rm = na.rm))
#' makeCI
#'
#' Function to calculate (two-sided) credible interval based on quantiles of a vector
#' @param makeCI.vec Vector for which quantiles will be found
#' @param alpha What Type I error level alpha should be used? Defaults to 0.05
#' @param na.rm Should NA's be excluded? Defaults to FALSE
#' @keywords credible interval
#' @seealso makeCIs
#' @export
#' @examples
#' ##
#' my.vector = rnorm(n = 1000,mean = 0, sd = 10)
#' makeCI(my.vector)
#'
makeCI <- function(makeCI.vec, alpha=0.05, na.rm=FALSE){
#Parameter checking if possible
if (require(assertthat)){
assert_that(is.vector(makeCI.vec))
assert_that(is.numeric(makeCI.vec))
}
#Calculate (1-alpha)x100 % credible interval
quantile(x = makeCI.vec, probs = c(alpha/2, 1-alpha/2), na.rm = na.rm)
}
t(apply(makeCI.obj, 2, FUN = makeCI, alpha, na.rm = na.rm))
na.rm=TRUE
t(apply(makeCI.obj, 2, FUN = makeCI, alpha, na.rm = na.rm))
na.rm=TRUE
alpha=0.05
t(apply(makeCI.obj, 2, FUN = makeCI, alpha, na.rm = na.rm))
makeCI.obj
getwd()
document()
document()
install_github("lcomm/ltools")
?cat_function()
?makeCI
?colMedians
document()
library(devtools)
library(roxygen2)
getwd()
document()
install_github("lcomm/ltools")
?colMedians
document()
setwd("c:/users/leahcomment/packages/ltools")
document()
library(devtools)
library(roxygen2)
install_github("lcomm/ltools")
?colMedians
?cat_function()
?ltools
document()
install_github("lcomm/ltools")
?cat_function()
?colMeans
?colMedians
install_github("lcomm/ltools")
library(ltools)
?cat_function()
install_github("lcomm/ltools")
library(ltools)
?cat_function()
install_github("lcomm/ltools")
colMedians(matrix(1:100,10,10))
cat_function()
cat_function(FALSE)
?cat_function()
?ltools
??ltools
?cat_function()
