// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dMultinomCpp
NumericVector dMultinomCpp(NumericVector x, NumericMatrix prob, bool lg);
RcppExport SEXP ltools_dMultinomCpp(SEXP xSEXP, SEXP probSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dMultinomCpp(x, prob, lg));
    return rcpp_result_gen;
END_RCPP
}
// column_pickerCpp
Rcpp::NumericVector column_pickerCpp(Rcpp::NumericMatrix M, Rcpp::IntegerVector v);
RcppExport SEXP ltools_column_pickerCpp(SEXP MSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(column_pickerCpp(M, v));
    return rcpp_result_gen;
END_RCPP
}
// normalize_rowsCpp
arma::mat normalize_rowsCpp(arma::mat M);
RcppExport SEXP ltools_normalize_rowsCpp(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_rowsCpp(M));
    return rcpp_result_gen;
END_RCPP
}
// getbcl
arma::mat getbcl(arma::mat design_mat, arma::mat coef_mat);
RcppExport SEXP ltools_getbcl(SEXP design_matSEXP, SEXP coef_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type design_mat(design_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coef_mat(coef_matSEXP);
    rcpp_result_gen = Rcpp::wrap(getbcl(design_mat, coef_mat));
    return rcpp_result_gen;
END_RCPP
}
// expit_double
double expit_double(double x);
RcppExport SEXP ltools_expit_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(expit_double(x));
    return rcpp_result_gen;
END_RCPP
}
// dU_Cpp
arma::vec dU_Cpp(const arma::vec& coef_U, const arma::mat& Z, const arma::vec& A, const arma::vec& U, bool lg);
RcppExport SEXP ltools_dU_Cpp(SEXP coef_USEXP, SEXP ZSEXP, SEXP ASEXP, SEXP USEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type coef_U(coef_USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dU_Cpp(coef_U, Z, A, U, lg));
    return rcpp_result_gen;
END_RCPP
}
// dY_Cpp
arma::vec dY_Cpp(const arma::vec& coef_Y, const arma::mat& Z, const arma::vec& A, const arma::mat& asmM, const arma::vec& U, const arma::vec& Y, bool intx, bool lg);
RcppExport SEXP ltools_dY_Cpp(SEXP coef_YSEXP, SEXP ZSEXP, SEXP ASEXP, SEXP asmMSEXP, SEXP USEXP, SEXP YSEXP, SEXP intxSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type coef_Y(coef_YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type asmM(asmMSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type intx(intxSEXP);
    Rcpp::traits::input_parameter< bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dY_Cpp(coef_Y, Z, A, asmM, U, Y, intx, lg));
    return rcpp_result_gen;
END_RCPP
}
// dM_Cpp
arma::mat dM_Cpp(const arma::mat& coef_M, const arma::mat& Z, const arma::vec& A, const arma::vec& U, const arma::mat& asmM, const arma::vec& M, bool lg);
RcppExport SEXP ltools_dM_Cpp(SEXP coef_MSEXP, SEXP ZSEXP, SEXP ASEXP, SEXP USEXP, SEXP asmMSEXP, SEXP MSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coef_M(coef_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type asmM(asmMSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(dM_Cpp(coef_M, Z, A, U, asmM, M, lg));
    return rcpp_result_gen;
END_RCPP
}
// get_pU1_Cpp
arma::vec get_pU1_Cpp(const arma::mat& Z, const arma::vec& Y, const arma::vec& A, const arma::mat& asmM, const arma::vec& M, const arma::mat& coef_M, const arma::vec& coef_Y, const arma::vec& coef_U);
RcppExport SEXP ltools_get_pU1_Cpp(SEXP ZSEXP, SEXP YSEXP, SEXP ASEXP, SEXP asmMSEXP, SEXP MSEXP, SEXP coef_MSEXP, SEXP coef_YSEXP, SEXP coef_USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type asmM(asmMSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coef_M(coef_MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type coef_Y(coef_YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type coef_U(coef_USEXP);
    rcpp_result_gen = Rcpp::wrap(get_pU1_Cpp(Z, Y, A, asmM, M, coef_M, coef_Y, coef_U));
    return rcpp_result_gen;
END_RCPP
}
// calc_ARD_Cpp
double calc_ARD_Cpp(const arma::mat& coef_M, const arma::mat& Z, const arma::vec& U, const arma::vec& coef_Y, bool intx);
RcppExport SEXP ltools_calc_ARD_Cpp(SEXP coef_MSEXP, SEXP ZSEXP, SEXP USEXP, SEXP coef_YSEXP, SEXP intxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coef_M(coef_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type coef_Y(coef_YSEXP);
    Rcpp::traits::input_parameter< bool >::type intx(intxSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ARD_Cpp(coef_M, Z, U, coef_Y, intx));
    return rcpp_result_gen;
END_RCPP
}
// rMultinomCpp
Rcpp::IntegerMatrix rMultinomCpp(Rcpp::NumericMatrix probs, int m);
RcppExport SEXP ltools_rMultinomCpp(SEXP probsSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rMultinomCpp(probs, m));
    return rcpp_result_gen;
END_RCPP
}
